// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions")]
  schemas    = ["extensions", "public"]
}

generator json {
  provider = "prisma-json-types-generator"
}

generator zod {
  provider          = "zod-prisma-types"
  useTypeAssertions = true // TODO - Temporary solution due to unsolved issue with Zod
}

model User {
  id        String    @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  email     String    @unique
  name      String
  realName  String?
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  Rating    Rating[]

  @@schema("public")
}

model Celebrity {
  id             Int       @id @default(autoincrement())
  name           String
  birthDate      DateTime?
  /// [CelebrityOptions]
  options        Json?     @db.JsonB
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
  directedMovies Movie[]   @relation(name: "Director")
  writtenMovies  Movie[]   @relation(name: "Writers")
  starredMovies  Movie[]   @relation(name: "Starring")
  starredShows   Show[]    @relation(name: "StarringShow")
  writtenShows   Show[]    @relation(name: "WritersShow")
  directedShows  Show[]    @relation(name: "DirectorShow")

  @@schema("public")
}

model Movie {
  id          Int         @id @default(autoincrement())
  title       String
  releaseDate DateTime?
  rating      Float?
  genres      Genre[]
  highlighted Boolean     @default(false)
  /// [MovieOptions]
  options     Json?       @db.JsonB
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
  director    Celebrity?  @relation(name: "Director", fields: [directorId], references: [id])
  directorId  Int?
  writers     Celebrity[] @relation(name: "Writers")
  starring    Celebrity[] @relation(name: "Starring")
  Rating      Rating[]

  @@schema("public")
}

model Show {
  id          Int         @id @default(autoincrement())
  title       String
  releaseDate DateTime?
  rating      Float?
  genres      Genre[]
  highlighted Boolean     @default(false)
  /// [ShowOptions]
  options     Json?       @db.JsonB
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
  director    Celebrity?  @relation(name: "DirectorShow", fields: [directorId], references: [id])
  directorId  Int?
  writers     Celebrity[] @relation(name: "WritersShow")
  starring    Celebrity[] @relation(name: "StarringShow")
  Rating      Rating[]

  @@schema("public")
}

model Rating {
  id        Int       @id @default(autoincrement())
  rating    Float
  comment   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  movie     Movie?    @relation(fields: [movieId], references: [id])
  movieId   Int?
  show      Show?     @relation(fields: [showId], references: [id])
  showId    Int?
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @db.Uuid

  @@unique([userId, showId])
  @@unique([userId, movieId])
  @@schema("public")
}

model Genre {
  id        Int       @id @default(autoincrement())
  name      String
  movies    Movie[]
  shows     Show[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@schema("public")
}
